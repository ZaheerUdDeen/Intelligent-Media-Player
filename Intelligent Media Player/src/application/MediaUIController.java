package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;

import java.io.File;
import java.io.IOException;
import java.net.URL;

import java.util.ResourceBundle;

import com.jfoenix.controls.JFXSlider;

import javafx.animation.RotateTransition;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Slider;
import javafx.scene.control.TextArea;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.media.MediaPlayer.Status;
import javafx.util.Duration;

public class MediaUIController implements Initializable{
	public static RotateTransition transition2;
	 
	@FXML
	private ImageView img2;
	@FXML
	private JFXSlider mediaSlider;
	@FXML
	private ImageView planAndPauseIcon;
	
	@FXML
    private Pane sPane;
	@FXML
	private JFXSlider volumeSlider;
	@FXML
	private MediaView mediaView;
	static int lock=0;
	@FXML
	private ListView<String> sliderVSummmaryList;
	static MediaPlayer player;
	Notification notify = new Notification();
	Stage newStage = new Stage();
	Media media;
	static Thread frameConverterThread,viedoPlay,suumaryObserver;
	PlayVideo pv;
	// Event Listener on Button.onAction
	@FXML
	public void playStatus(ActionEvent event) {

		playAndPauseDecision();
	}
	public void trnsitionHandler(){
		
		transition2=new RotateTransition(Duration.seconds(600),img2);
		transition2.setCycleCount(1);
		transition2.setAutoReverse(false);
		transition2.setRate(5);
		
		transition2.setFromAngle(500);
		transition2.setToAngle(1);
		img2.setImage(new Image("imag/synching.png"));
		
	}
	public static void endTrnsition(){
		transition2.setOnFinished((ActionEvent event1)->{
			//img2.setImage(new Image("imag/Ok-48.png"));
		
		});
	}
	public  void playAndPauseDecision(){
		// TODO Autogenerated
				Status status = player.getStatus();

				if (status == Status.PLAYING) {
					if (player.getCurrentTime().greaterThanOrEqualTo(player.getTotalDuration())) {
						player.seek(player.getStartTime());
						//viedoPlay.stop();
					} else {

						planAndPauseIcon.setImage(new Image("imag/pasue.png"));
						lock=1;
						player.pause();

					}
				}
				if (status == Status.PAUSED || status == Status.HALTED || status == Status.STOPPED) {
					planAndPauseIcon.setImage(new Image("imag/play.png"));
					player.play();
					lock=0;
				}
	}
	protected void updateValues() {

		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				mediaSlider.setValue(player.getCurrentTime().toMillis() / player.getTotalDuration().toMillis() * 100);
			}
		});
	}

	FileChooser chooser;
	File file;
	VideoToFrameConverter vtFrame;
	@FXML
	void addVideo(ActionEvent event) {
		try {
			
			chooser = new FileChooser();
			FileChooser.ExtensionFilter filter = new FileChooser.ExtensionFilter("select your media(*.mp4)", "*.mp4");
			chooser.getExtensionFilters().add(filter);
			file = chooser.showOpenDialog(newStage);
			System.out.println(file.getPath().replace("\\", "\\\\"));
			Platform.runLater(new Runnable(){
				@Override
				public void run() {
					// TODO Auto-generated method stub
					vtFrame=new VideoToFrameConverter(file.getPath().replace("\\", "\\\\"));
					frameConverterThread=new Thread(vtFrame);
					frameConverterThread.start();
					MediaUIController.transition2.play();
					pv=new PlayVideo();
					viedoPlay=new Thread(pv);
				}
			});
		} catch (Exception e) {
			// TODO Auto-generated catch block
			notify.errorNotifiaction("File Insertion Error");
			e.printStackTrace();
		}

	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		trnsitionHandler();
		
		
		
	}
	private  class PlayVideo  implements Runnable{

		@Override
		public void run() {
			// TODO Auto-generated method stub

			media = new Media("file:///" +file.getAbsolutePath().replace("\\", "/"));
			
			player = new MediaPlayer(media);
			mediaView.setMediaPlayer(player);
			mediaView.setY(5);
			mediaView.setScaleX(1);
			mediaView.setScaleY(1);
			mediaView.setScaleZ(5);

			
			
			volumeSlider.setValue(100);
			player.play();
			MainUIController.cameraThread.start();
			player.currentTimeProperty().addListener(new ChangeListener<Duration>() {
				@Override
				public void changed(ObservableValue<? extends Duration> observable, Duration oldValue, Duration newValue) {
					updateValues();
				}
			});
			
			
			

			mediaSlider.valueChangingProperty().addListener(new ChangeListener<Boolean>() {
				@Override
				public void changed(ObservableValue<? extends Boolean> obs, Boolean wasChanging, Boolean isNowChanging) {
					if (!isNowChanging) {
						player.seek(Duration.seconds(mediaSlider.getValue() / 100));
					}
				}
			});
			volumeSlider.setValueChanging(true);
			volumeSlider.setValue(100);
			volumeSlider.valueChangingProperty().addListener(new ChangeListener<Boolean>() {
				@Override
				public void changed(ObservableValue<? extends Boolean> obs, Boolean wasChanging, Boolean isNowChanging) {
					if (!isNowChanging) {
						player.setVolume(volumeSlider.getValue());
					}
				}
			});

		}
		
	}
}
